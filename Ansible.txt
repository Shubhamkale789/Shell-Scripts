What is Ansible=>
Ansible is an open source automation tool, or platform used for IT tasks such as configuration management, application deployment, intraservice orchestration and provisioning.

Benefits of ansible=>

Free: Ansible is an open-source tool.

Very simple to set up and use: No special coding skills are necessary to use Ansible’s playbooks (more on playbooks later).

Powerful: Ansible lets you model even highly complex IT workflows. 

Flexible: You can orchestrate the entire application environment no matter where it’s deployed. You can also customize it based on your needs.

Agentless: You don’t need to install any other software or firewall ports on the client systems you want to automate. 
You also don’t have to set up a separate management structure.
note: Ansible is also agent oriented configuration tool but it uses ssh protocol for communication with client machines.
      We do have agent based configuration tool such as puppet, chef.

Efficient: Because you don’t need to install any extra software, there’s more room for application resources on your server.

				
1. Configuration Management with ansible:
	Ansible is designed to be very simple, reliable and consistent for configuration management. If you are already working in IT you can get up and running with it very quickly. Ansible configuration are simple data descriptions of infrastructure which can be easily readable by humans and parcable by machines.

2. Application deployment with ansible:
	Ansible lets you quickly and easily deploy multi-tier apps, you wont need to write custom code to automate your systems.

3. Security and compliance:
	If you configure a security details on the control machine and run the associated playbook all the remote hosts will automatically be updated with those details. That means you wont need to monitor each machine for security compliance continually manually.

4. Cloud Provisionig:
	To automate your application you should automate your infrastructure provisioning first with ansible you can provision cloud platforms virtualize hosts, network devices and baremetal servers.

Components of ansible:
1. Tasks:
	Any action we took for slave node is called task.
2. Inventory file:
	It is an file stored on controller node which contains details like worker node information, IP, host name, username,    password.
3. How to see inventory file:
	Ansible --version ======> 

======================================================================================================================================
#Setting the lab for ansibe

1. Create three linux instances one master and other slaves.
2. Install ansible on master instance only not on slave instances.

	sudo apt install python3
	sudo apt install software-properties-common
	sudo apt-add-repository ppa:ansible/ansible
	sudo apt-get update
	sudo apt-get install ansible

3. check version of ansible using the command: ansible --version
4. On all instances edit the sshd configuration file and Permitrootlogin to yes and password authentication as yes.
	vi /etc/ssh/sshd_config
	systemctl restart sshd
5. Also set root password for slave instances.
6. On master instance run the following command and connect to the slave instace from master instance.
	ssh root@(pub IP add. of slave inst)
7. Edit the ansible hosts file to add the Ip addresses of the users and groups to the hosts configuration file.
	vi /etc/ansible/hosts
8. For creating a passwordless connection with slave instances generate the ssh key on master instance and copy that key to slave 
   instances using the following commands.
	ssh-keygen
	ssh-copy-id root@prv.Ip 
	ssh root@prv.ip (Try to connect without password)
	

======================================================================================================================================


To list a specific host of an Ip address
ansible (IP address) list-host

To list out all hosts on master server
ansible all --list-host

To list out group of host on master 
ansible (group name) --list-host

We can create a inventory file for ansible containing users or groups with IP address and list them on ansible using:
ansible all --list-hosts -i (inventoryfilename).cfg

If you dont want to use default inventory file you can create you own inventory file and use it.
If you want to list our hosts under your inventory file you have to run above command
	
======================================================================================================================================

#Ansible Modules:
	A module is a reusable standalone script that ansible runs on your behalf either locally or remotely, modules interact with 
your local machines on API or a remote system to perform specific tasks like changing a database password, changing a configuration 
file or spinnig of a cloud instance.

Basic Ansible Modules:
1. Command_Raw module:
	With the help of command_raw module we can run or perform any linux command on slave machine.

Syntax for running a module:
	ansible [group name/IP] (option) (modulename) (argument)
	eg. ansible webservers -m command -a "uptime"
       	eg. ansible webservers -m command -a "date" -k

(use option -k for using the password based connection with slave machines)
(argument option stands for any command that we want to run on all slaves at the same time)
(we can use any linux command like date,cal, install, remote.etc as an argument)

[here webservers is target slaves group name which we have defined under /etc/ansible/hosts file. 
 -m stands for module, command is the name of a module 
 -a stands for argument]
To disable host key checking under inventory file make a entry like below
	host_key_checking=false
You can use command module for single command only, to use multiple commands we need to go for raw module
	eg. ansible webservers -m raw -a "ls;date;pwd"

2. Ansible copy module:
	Whenever we want to copy a file from master node to slave node we need to use copy module.
	eg. ansible webservers -m copy -a "src=/etc/passwd dest=/tmp"
note: whenever you run ansible module it will provide output and output will have different colours those are yellow green red.
=>	Yellow- It means whatever ansible command or ansible playbook you have run got executed successfully and it changed some configuration 
	in slave nodes
=>	Green- It means your ansible command or file executed successfully but no changes happened ( It means those changes were already
	present on the slave.
=>	Red- It means there is an error occured while running ansible command or file.

Copy Module Options:
if  a file is already present in worker (slave node ) , you want to keep that file as well the n set backup=yes

ansible web -m copy -a "src = /etc/passwd  dest=/tmp owner=rahul group=aws mode=777  backup=yes" -k  --(will keep older file as bak up )


In above both senario file was present in controller and we were copying itt in worker .
but now if file is present in worker olny and we want to copy it in another location of worker only then 

ansible web -m copy -a "src = /etc/passwd  remote_src=yes  dest=/tmp owner=rahul group=aws mode=777 " -k 


 To write any content inside a file 

ansible web -m copy -a "content="welcome to Ansible " dest=/tmp/newfile.txt'

to see full doc

ansible-doc copy

3. Fetch Module:
	We use fetch module to copy files from worker node to controller node.

	ansible web -m fetch -a 'src=/var/log/auth.log dest=/logs/rahullog'
 
4. Shell Module:
	It it same like command module but it executes commands in /bin/sh means it uses sh shell to run the commands.
	
	ansible copy module
	ansible all -m shell -a "sh /tmp/myscript.sh"

5. File Module:
	We use this module to create update or delete a file or directory.
	ansible webservers -m file -a "path=/tmp/india state=directory"
	ansible webservers -m file -a "path=/tmp/india2 state=touch"


6. Package Module:
	Package module is a combination of all repositories which we use to install and remove a software, if you are looking for specfific yum or apt module those are also available.
	
	ansible all -m package -a "name=nginx state=present/absent"          (Present-Install Absent-uninstall)

7. Yum module / Apt module
	It is same as package module used to install and remove the packages.

	ansible all -m yum -a "name=nginx state=latest"
	ansible all -m apt -a "name=nginx state=latest"

8. Service Module:
	Service module is useful to control services on remote machines i.e slaves 
	ansible all -m service -a "name=nginx state=started/stopped"

9. User and Group module:
	We use this module for creating new users and groups on remote machines (slaves).

	User module we use to create users
	ansible web -m user -a "name-Bravo comment="ITAdmin" uid=1010 group=wipro"

	group module we use to create groups
	ansible webservers -m group -a "name=Bravo state=present"

10. Line in file module:

	To add a line in file 
	ansible all -m  lineinfile -a "path=/etc/sudoers line='rahul ALL=(ALL)ALL'"

	To delete a line in file 
	ansible all -m  lineinfile -a "path=/etc/sudoers line='rahul ALL=(ALL)ALL' state=absent "
	ansible all -m  lineinfile -a "path=/etc/sudoers line='rahul ALL=(ALL)ALL' insertafter=BOF"
	ansible all -m  lineinfile -a "path=/etc/sudoers line='rahul ALL=(ALL)ALL' insertafter=EOF"
	ansible all -m  lineinfile -a "path=/etc/sudoers line='rahul ALL=(ALL)ALL' insertafter='^root'"
	ansible all -m  lineinfile -a "path=/etc/sudoers line='rahul ALL=(ALL)ALL' insertbefore='^root'"
	ansible all -m  lineinfile -a "path=/etc/sudoers line='rahul ALL=(ALL)ALL' regexp='^root'"
	ansible all -m  lineinfile -a "path=/etc/sudoers line='rahul ALL=(ALL)ALL' regexp='^root' state=absent"
=============================================================================================================================
		
#Ansible Playbooks:
	Ansible playbooks are list of tasks that automatically executes for your specified inventory or group of hosts, one or more ansible tasks can be combined to make a play. An ordered grouping of tasks map to specific hosts. Tasks are executed in the order in which they are written. A playbook can include one or more play. 
	Tasks are executed by modules each of which performs a specific tasks in a playbook, a module contains metadata that determines when and where a task is executed as well as which user executes it.
	There are thousands of ansible modules that can perform all kinds of IT tasks such as:

1. Cloud Management=>
	It creates deletes or updates virtual cloud networks in cloud infrastructure environments. It can add remove or 
update VMware clusters or Vspare clusture.

2. User Management=>
	With the help of ansible we can manage users on linux operating system, git, gitlab.

3. Networking=>
	Ansible provides multiple modules handles API, CISCO iOS, NXOS, iOS XR devices.

4. Security=>
	Open SSH_cert generates an open ssh host or user certificates, IPA_config manages global preIPA configuration settings.

5. Configuration management=>
	With the help of pip ansible manage configurations of applications or systems effectively.
	pip manages python library dependencies.

6. Communication=>
	Ansible can send emails based on certain criteria and shows created, updated, deleted records in servicenow.

=============================================================================================================================
	There are two ways to run ansible modules;
	1. Adoc 
	2. Playbook

	We can write a playbook in two different language: 	1. YAML 	2. JSON	
	We can write a playbook in three different formats:
		1. Single line format
		2. Multi line format
		3. Dictionary format
	To run a playbook use the following command:
			ansible-playbook (playbookname)

1. Single Line format:
	In single line format arguments will be present along with module.
	-hosts: all
	tasks:
		-copy: src=/etc/group dest=/tmp owner=ubuntu group=ubuntu mode=777

2. Multi line format:
	In multi line format arguments will start from module name and each new argument will be on new line.
	-hosts: all
	tasks:
		-copy: src=/etc/shadow
		       dest=/tmp
		-file: path=/tmp/azure
		       state=directory
3. Dictionary format;
	-hosts: all
	tasks:
		-copy:
		   src: /etc/passwd
		   dest: /tmp/
	
#Name =>	
If you want to give a message for a play you need to write nametag above hosts tag.
eg.    - name: This is my all server
	 hosts: all
	 tasks: 
	    - copy :
                src: /etc/passwd
		dest: /tmp/

If you want to give a message inside module or tasks 
- name: This is my all server
	 hosts: all
	 tasks: 
	    - name: Here we are running copy module	
	    - copy :
                src: /etc/passwd
		dest: /tmp/

#Defining tasks in separate file and calling them =>
	We can define our tasks in a separate file for simplicity and readability purpose. Here we need to import those tasks inside our
main playbook. 
Defining a separate task in main playbook:
	- name: This task is going to copy passwd file to tmp
          hosts: all
          tasks: 
           - copy: 
               src: /home/ubuntu
               dest: /tmp

Importing tasks into the main playbook:
	-name: This is my all server
         hosts: all
	 tasks: 
	  - import_tasks: taskone.yml	

#Ansible Variables: 
	As in every programming language we use variables to hold a value in similar way we can do in ansible playbook. To define variables
inside ansible playbook we need to use vars tag.
note= vars tag always be a next line of hosts tag.
	- hosts: all
	  vars:
	   mydir: /tmp/myfile
	   myfile: /etc/passwd

#Calling a variable under tasks:
	- hosts: all
	  vars:
	   mydir: /tmp/myfile
	   myfile: /etc/passwd
	- tasks: 
  	    - file:
       		path: "{{ mydir }}"
       		state: directory
       
#Defining variables in separate file and accessing them:
	We can define variables in separate file for readability and simplicity purpose.
eg. Create a separate file containing all variables to be defined in ansible playbook.
    Create a new file:	myvar.yml
	
			mydir: /tmp/mydirone
			myfile: /etc/fstab

#Calling variables inside your main playbook:
			-hosts: all
			 vars_files:
			   - myvar.yml	
			-tasks:
			   -copy: 
			     src: "{{ myfile }}"
                             dest: "{{ mydir }}"

#Passing a variable value at runtime:
	We can pass variable values as a command line argument which will make your playbook loosely coupled. 
			- hosts: all
			  tasks: 
			   - copy:
			      src: "{{ myfile }}"
			      dest: /tmp
eg. ansible-playbook myplaybook.yml -e myfile=/etc/passwd
note:
1. There is higher priority to command line arguments variables as compared with variables defined inside a playbook.
2. If you declare a variable value in variable file and your main playbook as well it will give priority to variable
   from a variable file.

#Defining variable inside inventory file:
	We can define variable inside a inventory file in two ways:
		1. Host level
		2. Group level

1. Host Level =>
	In this way we define our variable infront of hostname or IP address inside an inventory file.
		[webservers]
		172.31.40.8 myfile=/tmp/india
	We can provide different values for same variable 
		172.31.40.8 myfile=/tmp/india
		172.31.39.5 myfile=/tmp/sunil
	Now when we run our ansible playbook it will take value of myfile variable accordingly.

2. Group Level =>
	We can define variables at group level, this variables will be applicable on all the slave machines which are
under the particular group, we can define variables at group base as below:
eg. 		[webservers]
		172.31.40.8

		[webservers:vars]
		myfile=/tmp/abcd

eg. 		[web]
		192.168.191.12 ansible_ssh_user=root ansible_ssh_pass=1234 ansible_ssh_port=22

		[web:vars]
		ansible_ssh_user=root
		ansible_ssh_pass=1234
		ansible_ssh_port=22

#Ansible Loops =>
	Whenever we want to perform a task for multiple objects then we need to perform same task repeatatively, 
eg. If you have three files and you want to copy them to the slave, here we can achieve this by using two methods.
	1. By writing copy task for every single file
	 -hosts: all
	    tasks:
	   - [copy block 1]
	   - [copy block 2]
	   - [copy block 3]

	2.
	   -hosts: all
	    tasks: 
		-copy:
		  src: "{{ item }}"
	 	  dest: /tmp
   		 with items:
		     - /etc/passwd
		     - /etc/group
		     - /etc/shadow
	3. -hosts: all
	    tasks: 
	      - package:
		  name: "{{ item }}"
		  state: latest 
                  with_items:
 		    - python
		    - nginx
		    - tree

	Above is a simple loop which is having item variable predefined (system defined), we cannot use item variable multiple times due to conflicts ( Conflicts: If we use item variable multiple time in a module ansible will get confused which value should it pickup.
eg. Below will not work 
	- hosts: all
	  tasks:
 	   - copy: 	
	      src: "{{ item }}"
   	      dest: "{{ item }}"
	     with_items: 
	        - /etc/passwd
                - /etc/group
                - /etc/shadow
             with_items:
                - /tmp
                - /
                - /home/

	To overcome this problem we need to use user defined variables inside our loops.

	- hosts: all  
	  vars: 
            mydir:
	     - /tmp/anil 
	     - /tmp/sunil
	     - /tmp/manish
            myfile:
             - /etc/passwd
             - /etc/group
            tasks:
             - copy: 
		src: "{{ item }}"
                dest: /tmp
               with_items:
                    -"{{ myfile }}"
          
            - file:
               path: "{{ item }}"
               state: directory
              with_items: "{{ mydir }}"

#Nested Loops:
	As per standard documents we cannot use item variable at multiple places in a task, because it works abnormally.
To overcome this issue there is concept called nested loops.
In nested loop instead of with_items we do use with_nested.
eg. 	
	- hosts: all
	  tasks:
	   - copy: 
	      src: "{{ item[0] }}"
	      dest: "{{ item[1] }}"
	     with_nested:
		- /etc/passwd
		- /tmp

eg. Nested loop with variables
	-hosts: all
	 vars: 
          myfile:
	   - /etc/passwd
	   - /etc/group
	  mydir:
	   - /tmp
	   - /tmp/abc
	   - /tmp/xyz
	 tasks:
  	  - copy: 
	     src: "{{ item[0] }}"
	     dest: "{{ item [1] }}"
	    with_nested:
             - "{{ myfile }}"
             - "{{ mydir }}" 
	 
#Using multiple values with_nested loop:

	-hosts: all
	 tasks: 
	  - copy: 
	     src: "{{ item[0] }}"
	     dest: "{{ item[1] }}"
	    with_nested:
	     - [ '/etc/passwd','/etc/group','/etc/shadow' ]
	     - /tmp

Nested loop can't fulfill all of our requirements like:
1. One file should get copied into one directory where files are multiple and directories are multiple.
   file1 => dir1  |  file2 => dir2  |  file3 => dir3

*Hash Loop (#):
	As we discussed nested loop cant fulfill our all requirements, hence hash loop came in picture.
eg. Here we can define the source and destinations for a particular file individually

	- hosts: all
	  tasks: 
	   - copy: 
	      src: "{{ item.a }}"
              dest: "{{ item.b }}"
	     with_nested: 
	      - {a: '/etc/passwd', b: '/tmp' }
              - {a: '/etc/group', b: '/opt' }
              - {a: '/etc/shadow', b: '/mnt' }

================================================ Missing 10.02.2024 ============================================================================  

#Ansible Vault:
	Ansible vault is a feature that allows you to keep sensitive data such as passwords, keys in encrypted files rather than storing them inside a plain text. We can encrypt the ansible playbook file to hide the data stored within the file.

To encrypt a playbook we can use:
	Ansible-vault encrypt (playbook name) 

To decrypt a playbook we can use:
	Ansible-vault decrypt (playbook name)
 
To view the data inside the encrypted playbook we can use:
	Ansible-vault view (playbook name)

To edit the data of encrypted ansible playbook we can use:
	Ansible-vault edit (playbook name)

To run an encrypted playbook file :
	Ansible-playbook (playbook name) --ask-vault-pass

#Ansible Roles:
	Roles lets you automatically load related vars, files, tasks, handlers and other ansible artifacts based on a known file structure.
After you group your content into roles you can easily reuse them and share them with other users.

Roles Structure: 
	Ansible role has a defined directory structure with eight main standard directories. You must include at least one of these directories
in each role, you can skip any directories that role does not use.


roles/
    common/               # this hierarchy represents a "role"
        tasks/            #
            main.yml      #  <-- tasks file can include smaller files if warranted
        handlers/         #
            main.yml      #  <-- handlers file
        templates/        #  <-- files for use with the template resource
            ntp.conf.j2   #  <------- templates end in .j2
        files/            #
            bar.txt       #  <-- files for use with the copy resource
            foo.sh        #  <-- script files for use with the script resource
        vars/             #
            main.yml      #  <-- variables associated with this role
        defaults/         #
            main.yml      #  <-- default lower priority variables for this role
        meta/             #
            main.yml      #  <-- role dependencies
        library/          # roles can also include custom modules
        module_utils/     # roles can also include custom module_utils
        lookup_plugins/   # or other types of plugins, like lookup in this case

    webtier/              # same kind of structure as "common" was above, done for the webtier role
    monitoring/           # ""
    fooapp/               # ""

To Create an ansible role:
	ansible-galaxy init (role name)
	apt install tree
	tree









 